import logging
from logging.handlers import RotatingFileHandler
import os
from datetime import datetime as dt

import requests
from aiogram import Bot
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ParseMode
)
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from dotenv import load_dotenv

from parsing_news import get_last_news

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    filename='program.log',
    filemode='w',
)

logger = logging.getLogger(__name__)
logger.setLevel(logging.WARNING)
handler = RotatingFileHandler('my_logger.log', maxBytes=5000000, backupCount=5)
logger.addHandler(handler)

bot = Bot(
    token=os.getenv('TOKEN'),
    parse_mode=ParseMode.HTML
)
dp = Dispatcher(bot)
API = os.getenv('API')
BUTTONS = (
    KeyboardButton('/start'),
    KeyboardButton('/help'),
    KeyboardButton('/weather [–≥–æ—Ä–æ–¥]'),
    KeyboardButton('/news'),
)
COMMANDS = (
    '/start: –°–∫–∞–∂—É –ø—Ä–∏–≤–µ—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂—É –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ —É–º–µ—é,\n'
    '/help: –†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ –∫–∞–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è,\n'
    '/weather [–≥–æ—Ä–æ–¥]: —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ,\n'
    '/news: –ª—è—è—è—è –ì–∞–ª–∞—á–∫–∞ —è —Ç–µ —â–∞ —Ç–∞–∫–æ–µ —Ä–∞—Å—Å–∫–∞–∂—É!!1!'
)


@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(*BUTTONS)
    start_massage = (
        f'–ü—Ä–∏–≤–µ—Ç üëã, {message.chat.first_name}!\n'
        '–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Ä–æ–¥–∏–ª—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n'
        '–†–∞—Å—Å–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–∫–∞–∂—É –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ.\n'
        'C–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç—ã —É–≤–∏–¥–µ—à—å –∑–∞—é–∑–∞—è –∫–æ–º–∞–Ω–¥—É: /help\n'
        '–ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è:)'
    )
    await message.reply(start_massage, reply_markup=keyboard)
    logger.warning(start_massage)


@dp.message_handler(commands=['help'])
async def help_command(message: Message):
    await message.reply(COMMANDS)
    logger.warning(COMMANDS)


@dp.message_handler(commands=['weather'])
async def get_city(message: Message):
    await message.reply(
        '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ–≥–æ–¥—É'
    )


@dp.message_handler()
async def get_weather(message: Message):
    try:
        r = requests.get(
            'https://api.openweathermap.org/data/2.5/weather?q=\n'
            f'{message.text.split()[-1]}&appid={API}&units=metric'
        )
        data = r.json()
        answer_massage = (
            f'–í –≥–æ—Ä–æ–¥–µ {data["name"]} —Å–µ–π—á–∞—Å {data["main"]["temp"]}¬∞.\n'
            f'–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data["main"]["humidity"]}.\n'
            f'–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {dt.fromtimestamp(data["sys"]["sunrise"])}.\n'
            f'\U00002620 –ë—É–¥—å –∑–¥–æ—Ä–æ–≤:)'
        )
        await message.reply(answer_massage)
        logger.warning(answer_massage)

    except Exception:
        error = (
            '\U00002620 –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –±—Ä–æ:)\n'
            '–ú–± —Ç—ã –ø–∏—à–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ —É–∫–∞–∑–∞–ª?'
        )
        await message.reply(error)
        logger.warning(error)


@dp.message_handler(commands=['news'])
async def get_news(message: Message):
    date_timestamp, url = get_last_news()
    news = f'<b>{dt.fromtimestamp(date_timestamp)}</b> {url}'
    await message.reply(news)
    return logger.warning(news)


if __name__ == '__main__':
    executor.start_polling(dp)
